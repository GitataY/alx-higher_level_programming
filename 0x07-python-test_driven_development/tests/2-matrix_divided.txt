import unittest
from matrix_divided import matrix_divided

class TestMatrixDivided(unittest.TestCase):
"""This class module tests matrix division"""

    def test_matrix_divided(self):
	"""Test cases"""
        # Test case 1: Divide a matrix by 2
        matrix = [[1, 2, 3], [4, 5, 6]]
        div = 2
        expected_result = [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]
        result = matrix_divided(matrix, div)
        self.assertEqual(result, expected_result)

        # Test case 2: Divide a matrix by 3
        matrix = [[9, 8], [6, 5], [3, 2]]
        div = 3
        expected_result = [[3.0, 2.67], [2.0, 1.67], [1.0, 0.67]]
        result = matrix_divided(matrix, div)
        self.assertEqual(result, expected_result)

        # Test case 3: Divide a matrix by -2
        matrix = [[-10, -20], [-30, -40]]
        div = -2
        expected_result = [[5.0, 10.0], [15.0, 20.0]]
        result = matrix_divided(matrix, div)
        self.assertEqual(result, expected_result)

        # Test case 4: Divide a matrix by 0 (should raise ZeroDivisionError)
        matrix = [[1, 2], [3, 4]]
        div = 0
        with self.assertRaises(ZeroDivisionError) as e:
            matrix_divided(matrix, div)
        self.assertEqual(str(e.exception), "division by zero")

        # Test case 5: Invalid matrix with non-integer/float elements (should raise TypeError)
        matrix = [[1, 2], [3, "four"]]
        div = 2
        with self.assertRaises(TypeError) as e:
            matrix_divided(matrix, div)
        self.assertEqual(str(e.exception), "matrix must be a matrix (list of lists) of integers/floats")

        # Test case 6: Invalid matrix with rows of different sizes (should raise TypeError)
        matrix = [[1, 2], [3, 4, 5]]
        div = 2
        with self.assertRaises(TypeError) as e:
            matrix_divided(matrix, div)
        self.assertEqual(str(e.exception), "Each row of the matrix must have the same size")

if __name__ == '__main__':
    unittest.main()
